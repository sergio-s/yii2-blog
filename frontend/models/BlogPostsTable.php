<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "blog_posts_table".
 *
 * @property integer $id
 * @property string $alias
 * @property string $title
 * @property string $description
 * @property string $h1
 * @property string $content
 * @property string $createdDate
 */
class BlogPostsTable extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'blog_posts_table';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['alias', 'title', 'description', 'h1'], 'required'],
            [['content'], 'string'],
            [['createdDate'], 'safe'],
            [['alias', 'title', 'description', 'h1'], 'string', 'max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'alias' => 'Alias',
            'title' => 'Title',
            'description' => 'Description',
            'h1' => 'H1',
            'content' => 'Content',
            'createdDate' => 'Created Date',
        ];
    }

    // This will be auto generated by gii if 'Generate ActiveQuery' is selected
    public static function find()
    {
        return new \app\models\BlogPostsTableQuery(get_called_class());
    }


    //получение всех постов от новых к старым
    public static function getAllPosts($sort = SORT_DESC)
    {

        $obj = self::find()->orderBy([
                                        'createdDate'=>$sort,
                                     ]);

        $obj->all();

        return $obj;

    }



   //получение один пост
    public static function getOnePоst($alias)
    {
         return self::find()->where([   'alias' => $alias,
                                        //'status' => '1'
                                        ])
                                        ->one();


    }

    //получаем все категории, к которым принадлежит пост (getter)
    public function getParentCategoris()
    {
        return $this->hasMany(BlogCategorisTable::className(), ['id' => 'id_category'])->viaTable('blog_categoris_posts_table', ['id_post' => 'id']);
    }

    //выборка соседних записей у текущей записи по принципу 2-слева, 2-справа при условии, что общее число записей
    //более 4(по умолчанию).Если менее, то столько, сколько есть. Если элемент в конце, то берутся соседние элементы перед
    //ним. Если вначале - то последующие.
    public function getSiblingsPosts($cat = false)
    {
        $beforeLimit = 2;//изначальный лимит выборки до текущего id
        $afterLimit  = 2;//после

        if($cat){

            $countBefore = self::find()
                    ->innerJoin('blog_categoris_posts_table', "blog_categoris_posts_table.id_post = blog_posts_table.id")
                    ->select('blog_posts_table.id')
                    ->where(['=', 'blog_categoris_posts_table.id_category', $cat])
                    ->andWhere(['<', 'blog_posts_table.id', $this->id])
                    ->orderBy(['blog_posts_table.id' => SORT_DESC])
                    ->limit(2)
                    ->count();

            $countAfter  = self::find()
                    ->innerJoin('blog_categoris_posts_table', "blog_categoris_posts_table.id_post = blog_posts_table.id")
                    ->select('blog_posts_table.id')
                    ->where(['=', 'blog_categoris_posts_table.id_category', $cat])
                    ->andWhere(['>', 'blog_posts_table.id', $this->id])
                    ->orderBy(['blog_posts_table.id' => SORT_ASC])
                    ->limit(2)
                    ->count();

        }else{//категория для выборки постов не передана

            $countBefore = self::find()->select('id')->where(['<', 'id', $this->id])->orderBy(['id' => SORT_DESC])->limit(2)->count();
            $countAfter  = self::find()->select('id')->where(['>', 'id', $this->id])->orderBy(['id' => SORT_ASC]) ->limit(2)->count();
        }


        //если до текущего элемента меньше элементов, чем нужно
        if($countBefore < 2){
            $afterLimit = (2 - $countBefore)+2;//вычитаем заданное количество минус сколько есть и добавляем полученное к лимиту после id
            $beforeLimit = $countBefore;
        }
        if($countAfter < 2){
            $beforeLimit = (2 - $countAfter)+2;
            $afterLimit = $countAfter;
        }

        if($cat){

            $before = self::find()
                    ->innerJoin('blog_categoris_posts_table', "blog_categoris_posts_table.id_post = blog_posts_table.id")
                    ->select('blog_posts_table.id , blog_posts_table.alias, blog_posts_table.title, blog_posts_table.img')
                    ->where(['=', 'blog_categoris_posts_table.id_category', $cat])
                    ->andWhere(['<', 'blog_posts_table.id', $this->id])
                    ->orderBy(['blog_posts_table.id' => SORT_DESC])
                    ->limit($beforeLimit)
                    ->indexBy('id')
                    ->all();

            $after  = self::find()
                    ->innerJoin('blog_categoris_posts_table', "blog_categoris_posts_table.id_post = blog_posts_table.id")
                    ->select('blog_posts_table.id , blog_posts_table.alias, blog_posts_table.title, blog_posts_table.img')
                    ->where(['=', 'blog_categoris_posts_table.id_category', $cat])
                    ->andWhere(['>', 'blog_posts_table.id', $this->id])
                    ->orderBy(['blog_posts_table.id' => SORT_ASC])
                    ->limit($afterLimit)
                    ->indexBy('id')
                    ->all();

//            $before = self::find()->where(['<', 'id', $this->id])->orderBy(['id' => SORT_DESC])->limit($beforeLimit)->indexBy('id')->all();
//            $after =  self::find()->where(['>', 'id', $this->id])->orderBy(['id' => SORT_ASC]) ->limit($afterLimit) ->indexBy('id')->all();

        }else{//категория для выборки постов не передана

            $before = self::find()->where(['<', 'id', $this->id])->orderBy(['id' => SORT_DESC])->limit($beforeLimit)->indexBy('id')->all();
            $after =  self::find()->where(['>', 'id', $this->id])->orderBy(['id' => SORT_ASC]) ->limit($afterLimit) ->indexBy('id')->all();
        }


        $res = ArrayHelper::merge($before, $after);
        ksort($res);

        //var_dump($res);die;
        return $res;

    }

    //число постов в категории по id категории
    public static function categoryCountPosts($id_cat)
    {
        return self::find()
                    ->innerJoin('blog_categoris_posts_table', "blog_categoris_posts_table.id_post = blog_posts_table.id")
                    ->select('blog_posts_table.id')
                    ->where(['=', 'blog_categoris_posts_table.id_category', $id_cat])
                    ->count();
    }


}
